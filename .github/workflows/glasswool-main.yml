name: GlassWool

on:
  push:
    # Skip the test suite if all changes are in the docs directory
    paths-ignore:
      - "docs/**"
      - "mkdocs.yml"
      - "**/*.md"
    branches:
      - main
      - "*.x.x"
  pull_request:
    # Skip the test suite if all changes are in the docs directory
    paths-ignore:
      - "docs/**"
      - "mkdocs.yml"
      - "**/*.md"
    branches:
      - main
      - "*.x.x"
  merge_group:

permissions:
  contents: read

concurrency:
  group: ${{ github.repository }}-${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true

env:
  FORCE_COLOR: "1"

jobs:
  test_core:
    name: Test ${{ matrix.os }} python-${{ matrix.python-version }}
    env:
      SQLALCHEMY_WARN_20: "1"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
#           - windows-latest
        python-version:
#           - "3.8"
#           - "3.9"
          - "3.10"
#           - "3.11"
    steps:
      - name: checkout
        uses: actions/checkout@v3

#      - name: install python
#        uses: actions/setup-python@v4
#        id: install_python
#        with:
#          python-version: ${{ matrix.python-version }}

      - name: Install Conda environment from environment.yml
        uses: mamba-org/provision-with-micromamba@main
        with:
#          cache-downloads: true
#          cache-env: true
          environment-file: conda-linux-64.lock
          environment-name: glasswool
#          micromamba-version: "*"
          micromamba-channel: conda-forge
#          micromamba-args: "--strict-channel-priority"
#          extra-specs: |
#            python=3.10

      - uses: syphar/restore-pip-download-cache@v1
        with:
          requirement_files: poetry.lock
          custom_cache_key_element: no-backends-${{ steps.install_python.outputs.python-version }}

#      - run: python -m pip install --upgrade pip 'poetry<1.4'

      - uses: syphar/restore-virtualenv@v1
        with:
          requirement_files: poetry.lock
          custom_cache_key_element: core

      - name: install ${{ matrix.os }} system dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          set -euo pipefail
          sudo apt-get update -y -q
          sudo apt-get install -y -q build-essential graphviz libgeos-dev
      - name: install ${{ matrix.os }} system dependencies
        if: matrix.os == 'windows-latest'
        run: choco install graphviz

      - name: install glasswool
        run: poetry install --without dev --without docs

      - uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: run all core tests and run benchmarks once parallel
        if: matrix.os != 'windows-latest'
        run: just ci-check
#        run: just ci-check -m "'core or benchmark'" -n auto

#      - name: upload code coverage
#        if: success()
#        uses: codecov/codecov-action@v3
#        with:
#          flags: core,${{ runner.os }},python-${{ steps.install_python.outputs.python-version }}

#      - name: publish test report
#        uses: actions/upload-artifact@v3
#        if: success() || failure()
#        with:
#          name: no-backends-${{ matrix.os }}-${{ matrix.python-version }}
#          path: junit.xml

